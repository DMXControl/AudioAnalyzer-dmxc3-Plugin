using LumosLIB.Tools.I18n;
using LumosLIB.Kernel.Log; 

namespace AudioAnalyzer {
    public partial class audioAnalysForm {

        // This file is autogenerated with the DesignerI18nScanner tool.
        // DO NOT MODIFY - Except commenting in/out lines to disable translations.

        private bool IsInitTranslated { get; set; }

        private void TranslateForm() {
            try {
				this.resetButton.Text = T._p("audioAnalysForm.resetButton.Text", "Reset");
				this.actualBPMLabel.Text = T._p("audioAnalysForm.actualBPMLabel.Text", "0");
				this.label13.Text = T._p("audioAnalysForm.label13.Text", "Beat");
				this.startButton.Text = T._p("audioAnalysForm.startButton.Text", "Start");
				this.syncButton.Text = T._p("audioAnalysForm.syncButton.Text", "Sync");
				this.label2.Text = T._p("audioAnalysForm.label2.Text", "Right");
				this.label1.Text = T._p("audioAnalysForm.label1.Text", "Left");
				this.devicesTabPage.Text = T._p("audioAnalysForm.devicesTabPage.Text", "Devices");
				this.label8.Text = T._p("audioAnalysForm.label8.Text", "Gain :");
				this.label7.Text = T._p("audioAnalysForm.label7.Text", "Input :");
				this.label6.Text = T._p("audioAnalysForm.label6.Text", "Device :");
				this.vuMeterTabPage.Text = T._p("audioAnalysForm.vuMeterTabPage.Text", "VU-Meter");
				this.lumosLabel1.Text = T._p("audioAnalysForm.lumosLabel1.Text", "Peak Hold Time :");
				this.PeakHoldCheckBox.Text = T._p("audioAnalysForm.PeakHoldCheckBox.Text", "Peak Sink");
				this.label3.Text = T._p("audioAnalysForm.label3.Text", "Level correction :");
				this.spectrumTabPage.Text = T._p("audioAnalysForm.spectrumTabPage.Text", "Spectrum");
				this.label10.Text = T._p("audioAnalysForm.label10.Text", "Level correction :");
				this.label4.Text = T._p("audioAnalysForm.label4.Text", "Number of Bands");
				this.beatTabPage.Text = T._p("audioAnalysForm.beatTabPage.Text", "Beat Detection");
				this.generatedBpmLabel.Text = T._p("audioAnalysForm.generatedBpmLabel.Text", "0");
				this.label11.Text = T._p("audioAnalysForm.label11.Text", "generated BPM");
				this.halfCheckBox.Text = T._p("audioAnalysForm.halfCheckBox.Text", "half");
				this.doubleCheckBox.Text = T._p("audioAnalysForm.doubleCheckBox.Text", "double");
				this.noOfLabel.Text = T._p("audioAnalysForm.noOfLabel.Text", "max. # of additional beats");
				this.sensitivityLabel.Text = T._p("audioAnalysForm.sensitivityLabel.Text", "Sensitivity");
				this.maxBPMCheckBox.Text = T._p("audioAnalysForm.maxBPMCheckBox.Text", "Max BPM = 240");
				this.label5.Text = T._p("audioAnalysForm.label5.Text", "Algorithm :");
				this.moodTabPage.Text = T._p("audioAnalysForm.moodTabPage.Text", "Mood");
				this.baseToneLabel.Text = T._p("audioAnalysForm.baseToneLabel.Text", "-");
				this.chordLabel.Text = T._p("audioAnalysForm.chordLabel.Text", "-");
				this.label18.Text = T._p("audioAnalysForm.label18.Text", "happy");
				this.label19.Text = T._p("audioAnalysForm.label19.Text", "sad");
				this.label17.Text = T._p("audioAnalysForm.label17.Text", "speedy");
				this.label16.Text = T._p("audioAnalysForm.label16.Text", "slowly");
				this.label15.Text = T._p("audioAnalysForm.label15.Text", "Chord");
				this.label12.Text = T._p("audioAnalysForm.label12.Text", "Basetone");
				this.generatorTabPage.Text = T._p("audioAnalysForm.generatorTabPage.Text", "Beat Generator");
				this.label14.Text = T._p("audioAnalysForm.label14.Text", "Rhythm:");
				this.label9.Text = T._p("audioAnalysForm.label9.Text", "BPM:");
				this.beatGeneratorUpDown.Text = T._p("audioAnalysForm.beatGeneratorUpDown.Text", "120");
				this.activateBeatGeneratorCheckbox.Text = T._p("audioAnalysForm.activateBeatGeneratorCheckbox.Text", "activate Beat Generator (disables beat detection)");
				this.tapButton.Text = T._p("audioAnalysForm.tapButton.Text", "&Tap");
				this.TabText = T._p("audioAnalysForm.TabText", "Audio Analyzer");
				this.Text = T._p("audioAnalysForm.Text", "Audio Analyzer");

                IsInitTranslated = true;
            }
            catch (System.Exception ex)
            {
                log.Warn("Unable to Translate Form: {0}", ex, ex.Message);
            }
        }
    }
}